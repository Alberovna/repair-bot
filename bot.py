# bot.py
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from decouple import config
import csv
import os

# --- –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env ---
BOT_TOKEN = config("BOT_TOKEN")
ADMIN_ID = config("ADMIN_ID", default=None, cast=int)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ---
class RepairRequest(StatesGroup):
    name = State()
    phone = State()
    device_type = State()
    problem_description = State()
    preferred_time = State()
    confirm = State()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ CSV ---
CSV_FILE = "repair_requests.csv"
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, mode='w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è"])

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è /start ---
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç"), KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ],
    resize_keyboard=True,  # –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–¥ —ç–∫—Ä–∞–Ω
    one_time_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ---
confirm_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (—Å –∫–Ω–æ–ø–∫–∞–º–∏) ---
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –¥–µ–≤–∞–π—Å–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=main_keyboard
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è) ---
@router.message(F.text == "–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
async def start_request_button(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(RepairRequest.name)

@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: Message):
    await message.answer("–ù–∞—à –∞–¥—Ä–µ—Å: —É–ª. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è, 10. –¢–µ–ª: +7 (123) 456-78-90")

# --- –ù–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã: /request –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ---
@router.message(Command("request"))
async def start_request(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(RepairRequest.name)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ ---
@router.message(RepairRequest.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7XXXXXXXXXX)")
    await state.set_state(RepairRequest.phone)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
@router.message(RepairRequest.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    if not (phone.startswith('+') and phone[1:].isdigit()) and not phone.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ü–∏—Ñ—Ä.")
        return
    await state.update_data(phone=phone)
    await message.answer("–ö–∞–∫–æ–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–º–∞—Ä—Ç—Ñ–æ–Ω, –Ω–æ—É—Ç–±—É–∫, –ø–ª–∞–Ω—à–µ—Ç)")
    await state.set_state(RepairRequest.device_type)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ---
@router.message(RepairRequest.device_type)
async def get_device_type(message: Message, state: FSMContext):
    await state.update_data(device_type=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è, —Ä–∞–∑–±–∏—Ç —ç–∫—Ä–∞–Ω)")
    await state.set_state(RepairRequest.problem_description)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã ---
@router.message(RepairRequest.problem_description)
async def get_problem_description(message: Message, state: FSMContext):
    await state.update_data(problem_description=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ –∏–ª–∏ –≤–∏–∑–∏—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 14:00, –∏–ª–∏ '–ª—é–±–æ–µ')")
    await state.set_state(RepairRequest.preferred_time)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@router.message(RepairRequest.preferred_time)
async def get_preferred_time(message: Message, state: FSMContext):
    await state.update_data(preferred_time=message.text)
    data = await state.get_data()
    text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
        f"–ò–º—è: {data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {data['device_type']}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {data['problem_description']}\n"
        f"–í—Ä–µ–º—è: {data['preferred_time']}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    await message.answer(text, reply_markup=confirm_keyboard)
    await state.set_state(RepairRequest.confirm)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è "–î–∞" ---
@router.message(RepairRequest.confirm, F.text == "‚úÖ –î–∞")
async def confirm_yes(message: Message, state: FSMContext):
    data = await state.get_data()
    with open(CSV_FILE, mode='a', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([data['name'], data['phone'], data['device_type'], data['problem_description'], data['preferred_time']])
    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ.")
    if ADMIN_ID:
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç!\n\n–ò–º—è: {data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data['device_type']}\n–ü—Ä–æ–±–ª–µ–º–∞: {data['problem_description']}\n–í—Ä–µ–º—è: {data['preferred_time']}"
        )
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ù–µ—Ç" ---
@router.message(RepairRequest.confirm, F.text == "‚ùå –ù–µ—Ç")
async def confirm_no(message: Message, state: FSMContext):
    await message.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞–Ω–æ–≤–æ!\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await state.set_state(RepairRequest.name)

# --- –≠—Ö–æ-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ –∞–Ω–∫–µ—Ç—ã ---
@router.message()
async def echo_message(message: Message, state: FSMContext):
    if not await state.get_state():
        await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())